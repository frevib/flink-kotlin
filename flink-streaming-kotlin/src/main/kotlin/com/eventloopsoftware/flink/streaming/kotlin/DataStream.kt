/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.eventloopsoftware.flink.streaming.kotlin

import com.eventloopsoftware.flink.streaming.kotlin.Kotlin.asKotlinStream
import org.apache.flink.api.common.typeinfo.TypeInformation
import org.apache.flink.api.java.functions.KeySelector
import org.apache.flink.streaming.api.datastream.DataStreamSink
import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator
import org.apache.flink.streaming.api.functions.sink.SinkFunction
import org.apache.flink.streaming.api.datastream.DataStream as JavaStream
import org.apache.flink.streaming.api.datastream.KeyedStream as JavaKeyedStream

open class DataStream<T>(val stream: JavaStream<T>) {

    fun <T> name(name: String): DataStream<T> = when (stream) {
        // Need to check if stream is of generic type, now there is an unsafe cast.
        // More info: https://stackoverflow.com/questions/33146160/how-to-check-generic-type-in-kotlin
        is SingleOutputStreamOperator -> DataStream<T>(stream.name(name)
                as org.apache.flink.streaming.api.datastream.DataStream<T>)
        else -> throw UnsupportedOperationException("Only supported for operators.")
    }

    inline fun <reified K> keyBy(noinline function: (T) -> K): KeyedStream<T, K> =
        asKotlinStream(
            JavaKeyedStream(stream, function, TypeInformation.of(K::class.java))
        )

    fun addSink(sinkFunction: SinkFunction<T>): DataStreamSink<T> = stream.addSink(sinkFunction)
}

